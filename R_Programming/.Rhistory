library(ggplot)
library(ggplot2)
search()
install.packages("ggplot")
install.packages("ggplot3")
install.packages("devtools")
library(rtools)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("ISLR")
library(KernSmooth)
getwd()
ls()
dir()
dir()
setwd("~/OneDrive/datasciencecoursera/R_Programming")
dir()
myfunction
source("myfunction.R")
ls()
myfunction()
second(2)
source("myfunction.R")
ls()
second(2)
source("myfunction.R")
second(2)
install.packages("swirl")
install.packages("boot")
install.packages(c("class", "cluster", "codetools"))
library(class)
library(cluster)
library(nlme)
install_from_swirl("R Programming")
library(swirl)
rm(list = ls())
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <= 5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- dir()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
dir.create(file.path("folder1", "folder2"), recursive = TRUE)
dir.create("folder1", "folder2", recursive = TRUE)
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
nxt()
swirl()
1:20
pi:10
15:1
?:
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 30, length <- 0.5)
seq(5, 30, length = 0.5)
seq(5, 10, length <- 30)
seq(5, 10, length = 30)
seq(5, 10, length<-30)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length<-30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
c(0.5, 55, -10, 6)
c(0.5, 55L, -10L, 6L)
vector(0.5, 55L, -10L, 6L)
num_vect <- c(0.5, 55L, -10L, 6L)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- "Qisong Wang"
my_name <- c(my_char, "Qisong")
my_name
paste(my_name, collapse = " ")
paste("Hello" "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(c("X", "Y", "Z"), collapse  = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, seq = "-")
paste(LETTERS, 1:4, sep = "-")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_data
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x <- c(rnorm(20), rep(NA, 20))
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
clear
play()
clear()
clean()
rm(list=ls())
nxt()
my_vector = 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TURE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE &* c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints >= 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit(boring_function())
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, divisor = 2)
agrs(remainder
)
agrs(remainder)
args(remainder)
submit()
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
?sd
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
paste
submit()
submit()
submit()
submit()
telegram("Hello", "World")
submit()
submit()
mad_libs("White House", "serious", "tree")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect
0
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lappy(flag_colors, sum)
lapplyy(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
uninstall_all_courses()
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
