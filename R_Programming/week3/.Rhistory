library(ggplot)
library(ggplot2)
search()
install.packages("ggplot")
install.packages("ggplot3")
install.packages("devtools")
library(rtools)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("ISLR")
library(KernSmooth)
getwd()
ls()
dir()
?cor
vec <- numeric(0)
vec
class(vec)
length(vec)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
getwd()
setwd("~/OneDrive/datasciencecoursera/R_Programming/week2/")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
vect <- 1:10
vect
vect[vect<5] <- 0
vect
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
rm(list = ls())
setwd("~/OneDrive/datasciencecoursera/R_Programming/week2")
rm(list = ls())
setwd("~/OneDrive/datasciencecoursera/R_Programming/week2")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of  the pollutant for which we will calcultate the
## mean; either "sulfate" or "nitrate"
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result
means <- c()
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
monitor_data <- read.csv(path)
interested_data <- monitor_data[pollutant]
means <- c(means, interested_data[!is.na(interested_data)])
}
mean(means)
}
complete <- function(directory, id = 1:332){
## 'director' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the from:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- data.frame(id=numeric(0), nobs=numeric(0))
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
monitor_data <- read.csv(path)
interested_data <- monitor_data[(!is.na(monitor_data$sulfate)), ]
interested_data <- interested_data[(!is.na(interested_data$nitrate)), ]
nobs <- nrow(interested_data)
results <- rbind(results, data.frame(id=monitor, nobs=nobs))
}
results
}
corr <- function(directory, threshold = 0){
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) requi?red to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
cor_results <- numeric(0)
complete_cases <- complete(directory)
complete_cases <- complete_cases[complete_cases$nobs>=threshold, ]
#print(complete_cases["id"])
#print(unlist(complete_cases["id"]))
#print(complete_cases$id)
if(nrow(complete_cases)>0){
for(monitor in complete_cases$id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
#print(path)
monitor_data <- read.csv(path)
#print(monitor_data)
interested_data <- monitor_data[(!is.na(monitor_data$sulfate)), ]
interested_data <- interested_data[(!is.na(interested_data$nitrate)), ]
sulfate_data <- interested_data["sulfate"]
nitrate_data <- interested_data["nitrate"]
cor_results <- c(cor_results, cor(sulfate_data, nitrate_data))
}
}
cor_results
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
rm(list=ls())
a <- array(rnorm(2*2*10), c(2, 2, 10))
a
?gl
?invisible
rm(list=ls())
swirl()
library(swirl)
swirl()
flags
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
>iris
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
?mtcars
tapply(mtcars$hp, mtcars$cyl, summary)
209.2-82.64
debug(ls)
ls
ls()
3
4
ls()
vect <- c(1, 2, 3)
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
q
